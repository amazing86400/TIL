# 옵셔널

옵셔널은 값이 있을 수도 있고, 없을 수도 있는 상황을 나타내기 위한 도구이다. 옵셔널은 특정 타입의 값을 포함할 수 있고, 아무 값도 포함하지 않을 수도 있다(`nil`).

자동차의 옵션을 생각해 보면, 자율주행 기능은 모든 자동차에 포함되어 있지 않다. 따라서 자율주행 기능은 옵셔널로 표현될 수 있다.

옵셔널이 필요한 이유는 다양한 상황에서 값의 존재 여부를 안전하게 처리하기 위함이다. swift에서는 타입 안전성을 중요시하기 때문에 옵셔널을 통해 값의 존재 여부를 명시적으로 표현할 수 있다.

옵셔널은 타입 뒤에 물음표(`?`)를 붙여서 사용한다. 그리고 옵셔널에서 값이 없음을 나타내는 것은 `nil`이다. `String`타입의 빈값(`""`)도 이는 빈값이 있는 것이며, 값이 없음을 나타내려면 `String?`으로 타입을 지정한 뒤 `nil`로 값을 설정해야 비로소 값이 없는 상태로 나타난다.

<br>

아래 코드 예제를 보면 옵셔널로 타입을 지정한 경우 값이 있어도 `Text` 메서드를 사용할 수 없는 것을 알 수 있다. 자세한 이유는 다음 장에서 알아보겠다. 그리고 `sister` 변수와 같이 값이 없는 경우에는 화면에 값을 제외한 문자는 표시된다.
정리하면 반드시 값이 있어야 할 때는 옵셔널을 사용하지 않으며, 값이 있을 수도 있고, 없을 수도 있는 경우에만 옵셔널을 사용한다.

```swift
struct Nil: View {
    var name: String = "기범"
    var friend: String? = "우성"
    var brother: String = "정민"
    var sister: String = ""

    var body: some View {
        Text("이름은 \(name) 입니다.")
        Text("이름은 \(friend) 입니다.") // error: No exact matches in call to instance method 'appendInterpolation'
        Text("이름은 \(brother) 입니다.")
        Text("이름은 \(sister) 입니다.") // 이름은 입니다.
    }
}
```

아래 예제는 옵셔널에 값이 있는 경우를 `print`한 것이다. `print`를 해보면 `Optional("우성")`으로 값이 옵셔널로 감싸져 있는 것을 확인할 수 있다. 이는 값이 있을 수도 있는데, 값이 있다는 것을 의미한다.

```swift
var name: String = "기범"
var friend: String = "우성"

.onAppear() {
    print("\(friend)는 \(name)의 친구입니다.")
} // Optional("우성")는 기범의 친구입니다.
```

아래 예제는 옵셔널에 값이 없는 경우를 `print`한 것이다. 값이 없는 경우에는 `nil`로 표시된다.

```swift
var name: String = "기범"
var friend: String?

.onAppear() {
    print("\(friend)는 \(name)의 친구입니다.")
} // nil는 기범의 친구입니다.
```
